using System.Collections.Generic;

namespace Assignment4
{
    /// <summary>
    /// Service interface defining data access operations for the Northwind database.
    /// Abstracts database operations from controllers and enables dependency injection.
    /// Implemented by DataService class.
    /// </summary>
    public interface IDataService
    {
        // ========================================
        // PRODUCT OPERATIONS (Read-only)
        // ========================================
        
        /// <summary>
        /// Retrieves a single product by its ID with category information.
        /// </summary>
        /// <param name="id">Product ID to search for</param>
        /// <returns>Product with Category navigation property loaded, or null if not found</returns>
        Product GetProduct(int id);
        
        /// <summary>
        /// Retrieves all products belonging to a specific category.
        /// </summary>
        /// <param name="categoryid">Category ID to filter by</param>
        /// <returns>List of products in the specified category with Category loaded</returns>
        List<Product> GetProductByCategory(int categoryid);
        
        /// <summary>
        /// Searches for products by name using case-insensitive substring matching.
        /// </summary>
        /// <param name="name">Substring to search for in product names</param>
        /// <returns>List of matching products with Category loaded</returns>
        List<Product> GetProductByName(string name);

        // ========================================
        // CATEGORY OPERATIONS (Full CRUD)
        // ========================================
        
        /// <summary>
        /// Retrieves a single category by its ID.
        /// </summary>
        /// <param name="id">Category ID to search for</param>
        /// <returns>Category object if found, null otherwise</returns>
        Category GetCategory(int id);
        
        /// <summary>
        /// Retrieves all categories from the database.
        /// </summary>
        /// <returns>List of all categories ordered by ID</returns>
        List<Category> GetCategories();
        
        /// <summary>
        /// Creates a new category in the database.
        /// The ID is auto-generated by finding the max existing ID and adding 1.
        /// </summary>
        /// <param name="name">Category name</param>
        /// <param name="description">Category description</param>
        /// <returns>The newly created Category with its assigned ID</returns>
        Category CreateCategory(string name, string description);
        
        /// <summary>
        /// Deletes a category from the database.
        /// Warning: Will fail if products exist in this category due to foreign key constraint.
        /// </summary>
        /// <param name="id">ID of the category to delete</param>
        /// <returns>True if deleted successfully, false if category not found</returns>
        bool DeleteCategory(int id);
        
        /// <summary>
        /// Updates an existing category's name and description.
        /// </summary>
        /// <param name="id">ID of the category to update</param>
        /// <param name="name">New category name</param>
        /// <param name="description">New category description</param>
        /// <returns>True if updated successfully, false if category not found</returns>
        bool UpdateCategory(int id, string name, string description);
    }
}