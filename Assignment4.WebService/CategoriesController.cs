using Microsoft.AspNetCore.Mvc;
using Assignment4;

namespace WebServiceLayer.Controllers;

/// <summary>
/// REST API controller for Category CRUD operations.
/// Provides endpoints for listing, retrieving, creating, updating, and deleting categories.
/// Base route: /api/categories
/// </summary>
[ApiController]  // Enables automatic model validation and API-specific behaviors
[Route("api/[controller]")]  // [controller] is replaced with "categories" (class name minus "Controller")
public class CategoriesController : ControllerBase
{
    private readonly IDataService _service;
    
    /// <summary>
    /// Constructor with dependency injection.
    /// ASP.NET Core automatically injects the IDataService implementation.
    /// </summary>
    public CategoriesController(IDataService service) => _service = service;

    /// <summary>
    /// GET /api/categories
    /// Retrieves all categories from the database.
    /// </summary>
    /// <returns>200 OK with array of category objects (Id, Name, Description)</returns>
    [HttpGet]
    public IActionResult GetAll()
    {
        var cats = _service.GetCategories();
        // Project to anonymous objects to control JSON shape (exclude navigation properties)
        return Ok(cats.Select(c => new { c.Id, c.Name, c.Description }));
    }

    /// <summary>
    /// GET /api/categories/{id}
    /// Retrieves a specific category by ID.
    /// </summary>
    /// <param name="id">The category ID</param>
    /// <returns>200 OK with category object, or 404 Not Found if category doesn't exist</returns>
    [HttpGet("{id:int}")]  // :int constraint ensures only integer values are routed here
    public IActionResult GetById(int id)
    {
        var cat = _service.GetCategory(id);
        if (cat is null) return NotFound();
        return Ok(new { cat.Id, cat.Name, cat.Description });
    }

    /// <summary>
    /// Request DTO for creating a new category.
    /// Record type provides immutability and concise syntax.
    /// </summary>
    public record CategoryCreateRequest(string Name, string Description);

    /// <summary>
    /// POST /api/categories
    /// Creates a new category in the database.
    /// Request body: { "name": "Category Name", "description": "Description text" }
    /// </summary>
    /// <param name="req">Category creation data from request body</param>
    /// <returns>
    /// 201 Created with Location header and created category object, or
    /// 400 Bad Request if name is missing/empty
    /// </returns>
    [HttpPost]
    public IActionResult Create([FromBody] CategoryCreateRequest req)
    {
        // Validate required fields
        if (req is null || string.IsNullOrWhiteSpace(req.Name))
            return BadRequest("Name is required.");

        // Create category (ID is auto-generated by DataService)
        var created = _service.CreateCategory(req.Name, req.Description ?? string.Empty);
        
        // Return 201 Created with Location header pointing to new resource
        return Created($"/api/categories/{created.Id}", new { created.Id, created.Name, created.Description });
    }

    /// <summary>
    /// Request DTO for updating an existing category.
    /// </summary>
    public record CategoryUpdateRequest(string Name, string Description);

    /// <summary>
    /// PUT /api/categories/{id}
    /// Updates an existing category's name and description.
    /// Request body: { "name": "Updated Name", "description": "Updated Description" }
    /// </summary>
    /// <param name="id">The ID of the category to update</param>
    /// <param name="req">Updated category data from request body</param>
    /// <returns>
    /// 200 OK if update successful,
    /// 404 Not Found if category doesn't exist,
    /// 400 Bad Request if name is missing/empty
    /// </returns>
    [HttpPut("{id:int}")]
    public IActionResult Update(int id, [FromBody] CategoryUpdateRequest req)
    {
        // Validate required fields
        if (req is null || string.IsNullOrWhiteSpace(req.Name))
            return BadRequest("Name is required.");

        // Attempt to update; DataService returns false if category not found
        var ok = _service.UpdateCategory(id, req.Name, req.Description ?? string.Empty);
        if (!ok) return NotFound();
        return Ok(); // Assignment requirements specify 200 OK on successful update
    }

    /// <summary>
    /// DELETE /api/categories/{id}
    /// Deletes a category from the database.
    /// Warning: May fail if category has associated products (foreign key constraint).
    /// </summary>
    /// <param name="id">The ID of the category to delete</param>
    /// <returns>
    /// 200 OK if deletion successful,
    /// 404 Not Found if category doesn't exist
    /// </returns>
    [HttpDelete("{id:int}")]
    public IActionResult Delete(int id)
    {
        // Attempt to delete; DataService returns false if category not found
        var ok = _service.DeleteCategory(id);
        if (!ok) return NotFound();
        return Ok(); // Assignment requirements specify 200 OK on successful deletion
    }
}
